generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Album {
    id          String    @id @map("id") @db.VarChar(26)
    createdAt   DateTime  @default(now()) @map("created_at") @db.DateTime(6)
    updatedAt   DateTime  @updatedAt @map("updated_at") @db.DateTime(6)
    title       String    @map("title") @db.VarChar(200)
    coverUrl    String    @map("cover_url") @db.VarChar(400)
    description String?   @map("description") @db.VarChar(500)
    releaseDate DateTime? @map("release_date") @db.Date

    vendorAlbums VendorAlbum[]
    artists      ArtistOnAlbum[]
    tracks       Track[]

    @@map("albums")
}

model Artist {
    id        String   @id @map("id") @db.VarChar(26)
    createdAt DateTime @default(now()) @map("created_at") @db.DateTime(6)
    updatedAt DateTime @updatedAt @map("updated_at") @db.DateTime(6)
    name      String   @map("name") @db.VarChar(200)

    vendorArtists VendorArtist[]
    albums        ArtistOnAlbum[]
    tracks        ArtistOnTrack[]

    @@map("artists")
}

model ArtistOnTrack {
    id             String @id @map("id") @db.VarChar(26)
    artist         Artist @relation(fields: [artistId], references: [id])
    artistId       String @map("artist_id") @db.VarChar(26)
    track          Track  @relation(fields: [trackId], references: [id])
    trackId        String @map("track_id") @db.VarChar(26)
    artistSequence Int    @map("artist_sequence") @db.UnsignedTinyInt

    @@map("artist_on_track")
}

model ArtistOnAlbum {
    id             String @id @map("id") @db.VarChar(26)
    artist         Artist @relation(fields: [artistId], references: [id])
    artistId       String @map("artist_id") @db.VarChar(26)
    album          Album  @relation(fields: [albumId], references: [id])
    albumId        String @map("album_id") @db.VarChar(26)
    artistSequence Int    @map("artist_sequence") @db.TinyInt

    @@map("artist_on_album")
}

model Migrations {
    id        Int    @id @default(autoincrement()) @map("id") @db.Int
    timestamp BigInt @map("timestamp") @db.BigInt
    name      String @map("name") @db.VarChar(255)
}

model Playlist {
    id        String   @id @map("id") @db.VarChar(26)
    createdAt DateTime @default(now()) @map("created_at") @db.DateTime(6)
    updatedAt DateTime @updatedAt @map("updated_at") @db.DateTime(6)
    title     String   @map("title") @db.VarChar(200)
    duration  Int?     @map("duration") @db.UnsignedInt
    coverUrl  String?  @map("cover_url") @db.VarChar(400)

    vendorPlaylist VendorPlaylist[]
    tracks         TrackOnPlaylist[]

    @@map("playlists")
}

model TrackOnPlaylist {
    id            String   @id @map("id") @db.VarChar(26)
    playlist      Playlist @relation(fields: [playlistId], references: [id])
    playlistId    String   @map("playlist_id") @db.VarChar(26)
    track         Track    @relation(fields: [trackId], references: [id])
    trackId       String   @map("track_id") @db.VarChar(26)
    trackSequence Int      @map("track_sequence") @db.UnsignedInt

    @@map("track_on_playlist")
}

model Track {
    id        String   @id @map("id") @db.VarChar(26)
    createdAt DateTime @default(now()) @map("created_at") @db.DateTime(6)
    updatedAt DateTime @updatedAt @map("updated_at") @db.DateTime(6)
    title     String   @map("title") @db.VarChar(255)
    duration  Int?     @map("duration") @db.UnsignedInt

    vendorTracks VendorTrack[]
    album        Album             @relation(fields: [albumId], references: [id])
    albumId      String            @map("album_id") @db.VarChar(26)
    playlists    TrackOnPlaylist[]
    artists      ArtistOnTrack[]

    @@map("tracks")
}

model User {
    id        String   @id @map("id") @db.VarChar(26)
    createdAt DateTime @default(now()) @map("created_at") @db.DateTime(6)
    updatedAt DateTime @updatedAt @map("updated_at") @db.DateTime(6)
    username  String   @map("username") @db.VarChar(50)

    vendorAccounts VendorAccount[]

    @@map("users")
}

model VendorAccount {
    id            String    @id @map("id") @db.VarChar(26)
    createdAt     DateTime  @default(now()) @map("created_at") @db.DateTime(6)
    updatedAt     DateTime  @updatedAt @map("updated_at") @db.DateTime(6)
    deactivatedAt DateTime? @map("deactivated_at") @db.DateTime(6)
    vendor        String    @map("vendor") @db.VarChar(32)
    encryptionKey Bytes     @map("encryption_key") @db.Binary(32)

    user   User   @relation(fields: [userId], references: [id])
    userId String @map("user_id") @db.VarChar(26)

    @@map("vendor_accounts")
}

model VendorAlbum {
    id        String   @id @map("id") @db.VarChar(26)
    createdAt DateTime @default(now()) @map("created_at") @db.DateTime(6)
    updatedAt DateTime @updatedAt @map("updated_at") @db.DateTime(6)
    vendor    String   @map("vendor") @db.VarChar(32)
    vendorId  String   @map("vendor_id") @db.VarChar(255)

    album   Album  @relation(fields: [albumId], references: [id])
    albumId String @map("album_id") @db.VarChar(26)

    @@unique([vendorId, vendor], map: "vendor_album_vendor_id")
    @@index([vendorId, vendor], map: "vendor_album_vendor_id_idx")
    @@map("vendor_albums")
}

model VendorArtist {
    id        String   @id @map("id") @db.VarChar(26)
    createdAt DateTime @default(now()) @map("created_at") @db.DateTime(6)
    updatedAt DateTime @updatedAt @map("updated_at") @db.DateTime(6)
    vendor    String   @map("vendor") @db.VarChar(32)
    vendorId  String   @map("vendor_id") @db.VarChar(255)

    artist   Artist @relation(fields: [artistId], references: [id])
    artistId String @map("artist_id") @db.VarChar(26)

    @@unique([vendorId, vendor], map: "vendor_artist_vendor_id")
    @@index([vendorId, vendor], map: "vendor_artist_vendor_id_idx")
    @@map("vendor_artists")
}

model VendorPlaylist {
    id        String   @id @map("id") @db.VarChar(26)
    createdAt DateTime @default(now()) @map("created_at") @db.DateTime(6)
    updatedAt DateTime @updatedAt @map("updated_at") @db.DateTime(6)
    vendor    String   @map("vendor") @db.VarChar(32)
    vendorId  String   @map("vendor_id") @db.VarChar(255)

    playlist   Playlist @relation(fields: [playlistId], references: [id])
    playlistId String   @map("playlist_id") @db.VarChar(26)

    @@unique([vendorId, vendor], map: "vendor_playlist_vendor_id")
    @@index([vendorId, vendor], map: "vendor_playlist_vendor_id_idx")
    @@map("vendor_playlists")
}

model VendorTrack {
    id        String   @id @map("id") @db.VarChar(26)
    createdAt DateTime @default(now()) @map("created_at") @db.DateTime(6)
    updatedAt DateTime @updatedAt @map("updated_at") @db.DateTime(6)
    vendor    String   @map("vendor") @db.VarChar(32)
    vendorId  String   @map("vendor_id") @db.VarChar(255)

    track   Track  @relation(fields: [trackId], references: [id])
    trackId String @map("track_id") @db.VarChar(26)

    @@unique([vendorId, vendor], map: "vendor_track_vendor_id")
    @@index([vendorId, vendor], map: "vendor_track_vendor_id_idx")
    @@map("vendor_tracks")
}
